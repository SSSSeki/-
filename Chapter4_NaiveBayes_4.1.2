import numpy as np
'''
Parameter:
    无
Returns:
    postingList-实验样本切分的词条
    classVac-类别标签向量
'''
#函数说明：创建实验样本
def loadDataSet():
    postingList = [['my', 'dog', 'has', 'flea', 'problems', 'help', 'please'],       #切分的词条
                 ['maybe', 'not', 'take', 'him', 'to', 'dog', 'park', 'stupid'],
                 ['my', 'dalmation', 'is', 'so', 'cute', 'I', 'love', 'him'],
                 ['stop', 'posting', 'stupid', 'worthless', 'garbage'],
                 ['mr', 'licks', 'ate', 'my', 'steak', 'how', 'to', 'stop', 'him'],
                 ['quit', 'buying', 'worthless', 'dog', 'food', 'stupid']]
    classVec = [0, 1, 0, 1, 0, 1]                                                    #类别标签向量，1代表侮辱性词汇，0代表不是
    return postingList,classVec

'''
Parameter:
    vocabList - createVocabList返回的列表
    inputSet - 切分的词条列表
Returns:
    return - 文档向量
'''
#函数说明：根据vocabList列表，将inputSet向量化，向量的每个元素为0或1
def setOfWordsVec(vocabList,inputSet):
    returnVec = [0]*len(vocabList)
    for word in inputSet:
        if word in vocabList:
            returnVec[vocabList.index(word)]=1
        else:print("the word: %s is not in my Vocabulary!" % word)
    return returnVec
'''
Parameter:
    dataSet - 整理的样本数据集
Returns:
    vocabSet -返回不重复的词条列表，也就是词汇表 
'''
def createVocabList(dataSet):
    vocabSet = set([])                                         #创建空的不重复列表
    for document in dataSet:
        vocabSet = vocabSet | set(document)#取并集
    return list(vocabSet)
'''
Parameter:
    trainMatrix - 训练文档矩阵，即setOfWords2Vec构成的矩阵
    trainCategory - 训练类别标签向量，既loadDataSet返回的classVec
Returns:
    p0Vect - 侮辱类条件概率数组
    p1Vect - 非侮辱类条件概率数组
    pAbusive - 文档数余侮辱类的概率
'''
def trainNB0(trainMatrix, trainCategory):
    numTrainDocs = len(trainMatrix)                                #计算训练的文档数目
    numWords = len(trainMatrix[0])                                 #计算每一篇文档的词条数
    pAbusive = sum(trainCategory)/float(numTrainDocs)              #文档属于侮辱类的概率
    p0Num = np.zeros(numWords)
    p1Num = np.zeros(numWords)                                     #分母初始化为0
    p0Denom = 0.0
    p1Denom = 0.0
    for i in range(numTrainDocs):
        if trainCategory == 1:
            p1Num += trainMatrix[i]
            p1Denom += sum(trainMatrix[i])
        else:
            p0Num += trainMatrix[i]
            p0Denom += sum(trainMatrix[i])
    p1Vect = p1Num/p1Denom
    p0Vect = p0Num/p0Denom
    return p0Vect, p1Vect, pAbusive  # 返回属于侮辱类的条件概率数组，属于非侮辱类的条件概率数组，文档属于侮辱类的概率

if __name__ == '__main__':
    postingList,classVex = loadDataSet()
    print('postingList:\n',postingList)
    myVocabList = createVocabList(postingList)
    print('myVocabList:\n',myVocabList)
    trainMat = []
    for postDoc in postingList:
        trainMat.append(setOfWordsVec(myVocabList,postDoc))
    print('trainMat:\n',trainMat)
    p0V, p1V, pAb = trainNB0(trainMat, classVex)
    print('p0V:\n', p0V)
    print('p1V:\n', p1V)
    print('classVec:\n', classVex)
    print('pAb:\n', pAb)

