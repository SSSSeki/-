from math import log

"""
Parameters:
    无
Returns:
    dataSet - 数据集
    labels - 分类属性
"""
#函数说明，创建测试数据集
def createdataSet():
    dataSet = [[0, 0, 0, 0, 'no'],#数据集
            [0, 0, 0, 1, 'no'],
            [0, 1, 0, 1, 'yes'],
            [0, 1, 1, 0, 'yes'],
            [0, 0, 0, 0, 'no'],
            [1, 0, 0, 0, 'no'],
            [1, 0, 0, 1, 'no'],
            [1, 1, 1, 1, 'yes'],
            [1, 0, 1, 2, 'yes'],
            [1, 0, 1, 2, 'yes'],
            [2, 0, 1, 2, 'yes'],
            [2, 0, 1, 1, 'yes'],
            [2, 1, 0, 1, 'yes'],
            [2, 1, 0, 2, 'yes'],
            [2, 0, 0, 0, 'no']]
    labels=['年龄', '有工作', '有自己的房子', '信贷情况']#分类属性
    return dataSet, labels

"""
Parameters:
    dataSet-数据集
Returns:
    shannonEnt-经验熵（香农熵）
"""
#函数说明：计算给定数据集的经验熵（香农熵）
def calcShannonEnt(dataSet):
    numEntires = len(dataSet)
    #标签-出现次数字典
    labelCounts = {}
    for featVec in dataSet:
        currentLabel = featVec[-1]
        if currentLabel not in labelCounts.keys():#如果标签没有被计入的经历则添加之
            labelCounts[currentLabel] = 0
        labelCounts[currentLabel] += 1
    shannonEnt = 0.0
    for key in labelCounts:                       #计算香农熵
        prob = float(labelCounts[key])/numEntires #选择该标签的概率
        shannonEnt -= prob * log(prob, 2)  # 利用公式计算
    return shannonEnt  # 返回经验熵(香农熵)

if __name__ == '__main__':
    dataSet, features = createdataSet()
    print(dataSet)
    print(calcShannonEnt(dataSet))
