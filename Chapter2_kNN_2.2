import numpy as np
from matplotlib.font_manager import FontProperties
import matplotlib.lines as mlines
import matplotlib.pyplot as plt
import operator
"""

Parameters:

    filename - 文件名

Returns:

    returnMat - 特征矩阵

    classLabelVector - 分类Label向量

"""

# 函数说明:打开并解析文件，对数据进行分类：1代表不喜欢,2代表魅力一般,3代表极具魅力
def file2matrix(filename):
    #打开文件
    fr = open(filename)
    #读取文件所有内容
    array0Lines = fr.readlines()
    #得到文件行数
    numberOfLines = len(array0Lines)
    # 返回的NumPy矩阵,解析完成的数据:numberOfLines行,3列
    returnMat = np.zeros((numberOfLines, 3))
    classLabelVector = []
    #行的索引列
    index = 0
    for line in array0Lines:
        #s.strip(rm)，当rm空的时候，默认删除空白符(包括'\n','\r','\t',' ')
        line = line.strip()
        #使用s.strip(str="",num=string, cout(str))将字符串根据'\t'分隔符进行切片
        listFromLine = line.split('\t')
        #将数据的前三列提取出来，放入returnMat的矩阵，也就是特征矩阵中
        returnMat[index, :] = listFromLine[0:3]
        #根据文中标记的喜欢程度分类
        if listFromLine[-1] == 'didntLike':
            classLabelVector.append(1)
        elif listFromLine[-1] == 'smallDoses':
            classLabelVector.append(2)
        elif listFromLine[-1] == 'largeDoses':
            classLabelVector.append(3)
        index += 1
    return returnMat, classLabelVector

"""

Parameters:

    datingDataMat - 特征矩阵

    datingLabels - 分类Label

Returns:

    无

"""

# 函数说明:可视化数据
def showdatas(datingDataMat, datingLabels):
    #设置汉字格式
    font = FontProperties(fname=r"c:\windows\fonts\simsun.ttc", size=14)
    # 将fig画布分隔成1行1列,不共享x轴和y轴,fig画布的大小为(13,8)
    # 当nrow=2,nclos=2时,代表fig画布被分为四个区域,axs[0][0]表示第一行第一个区域
    fig, axs = plt.subplots(nrows=2, ncols=2, sharex=False, sharey=False, figsize=(13, 8))

    numberOfLabels = len(datingLabels)
    LabelsColors = []
    for i in datingLabels:
        if i == 1:
            LabelsColors.append('blue')
        if i == 2:
            LabelsColors.append('yellow')
        if i == 3:
            LabelsColors.append('pink')
    #画散点图,以datingMat矩阵的第一列第二列画，散点大小s=15，透明度alpha=0.5
    axs[0][0].scatter(x=datingDataMat[:, 0], y=datingDataMat[:, 1], color=LabelsColors, s=15, alpha=0.5)
    #设置标题，x轴label，y轴label
    axs0_title_text = axs[0][0].set_title(u'每年获得的飞行常客里程数与玩视频游戏所消耗时间占比', FontProperties=font)
    axs0_xlabel_text = axs[0][0].set_xlabel(u'每年获得的飞行常客里程数', FontProperties=font)
    axs0_ylabel_text = axs[0][0].set_ylabel(u'玩游戏所消耗时间', FontProperties=font)
    plt.setp(axs0_title_text, size=9, weight='bold', color='red')
    plt.setp(axs0_xlabel_text, size=7, weight='bold', color='black')
    plt.setp(axs0_ylabel_text, size=7, weight='bold', color='black')

    #画出散点图,以datingDataMat矩阵的第二(玩游戏)、第三列(冰激凌)数据画散点数据,散点大小为15,透明度为0.5
    axs[0][1].scatter(x=datingDataMat[:, 1], y=datingDataMat[:, 2], s=15, alpha=.5)
    #设置标题和x，y轴label
    axs1_title_text = axs[0][1].set_title(u'玩视频游戏所消耗时间占比与每周消费的冰激淋公升数', FontProperties=font)
    axs2_xlabel_text = axs[1][0].set_xlabel(u'玩视频游戏所消耗时间占比', FontProperties=font)
    axs2_ylabel_text = axs[1][0].set_ylabel(u'每周消费的冰激淋公升数', FontProperties=font)
    plt.setp(axs0_title_text, size=9, weight='bold', color='red')
    plt.setp(axs0_xlabel_text, size=7, weight='bold', color='black')
    plt.setp(axs0_ylabel_text, size=7, weight='bold', color='black')
    #设置图例
    didntLike = mlines.Line2D([], [], color='blue', marker='.', markersize=6, label='didntLike')
    smallDoses = mlines.Line2D([], [], color='yellow', marker='.', markersize=6, label='smallDoses')
    largeDoses = mlines.Line2D([], [], color='pink', marker='.', markersize=6, label='largeDoses')
    #添加图例
    axs[0][0].legend(handles=[didntLike, smallDoses, largeDoses])
    axs[0][1].legend(handles=[didntLike, smallDoses, largeDoses])
    axs[1][0].legend(handles=[didntLike, smallDoses, largeDoses])
    #显示图例
    plt.show()
"""

Parameters:

    dataSet - 特征矩阵

Returns:

    normDataSet - 归一化后的特征矩阵

    ranges - 数据范围

    minVals - 数据最小值

"""
#对数据进行归一化（将数据的值控制在0-1之间）
def autoNorm(dataSet):
    #获得数据的最小值
    minVals = dataSet.min(0)
    maxVals = dataSet.max(0)
    #范围
    ranges = maxVals-minVals
    #shape(dataSet)返回dataSet的矩阵行列数
    normDataSet = np.zeros(np.shape(dataSet))
    #返回dataSet的行数
    m = dataSet.shape[0]
    #原始值减去最小值
    normDataSet = dataSet-np.tile(minVals, (m, 1))
    #除以最大和最小值的差，得到归一化数据
    normDataSet = normDataSet
    np.tile(ranges, (m, 1))
    #返回归一化数据结构，数据范围，最小值
    return normDataSet, ranges, minVals


"""

Parameters:

    inX - 用于分类的数据(测试集)

    dataSet - 用于训练的数据(训练集)

    labels - 分类标签

    k - kNN算法参数,选择距离最小的k个点

Returns:

    sortedClassCount[0][0] - 分类结果

"""
#kNN算法本体
def classify0(inX, dataSet, labels, k):
    #返回dataSet行数
    dataSetSize = dataSet.shape[0]
    #列向量方向重复inX共一次，行方向上inXdataSet次
    diffMat = np.tile(inX, (dataSetSize, 1))-dataSet
    #二次特征相减后平方
    sqDiffMat = diffMat**2
    #sum()所有元素相加，sum(0)列相加，sum(1)行相加
    sqDistances = sqDiffMat.sum(1)
    #开方计算距离
    distances = sqDistances**0.5
    #返回distances中元素从小到大索引值
    sortedDistIndices = distances.argsort()
    #记录类别的字典
    classCount = {}
    for i in range(k):
        #取出前k个元素的类别
        voteIlabel = labels[sortedDistIndices[i]]
        #计算类别次数
        classCount[voteIlabel] = classCount.get(voteIlabel, 0)+1
    sortedClassCount = sorted(classCount.items(), key=operator.itemgetter(1), reverse=True)
    #返回分类结果（所要分类的项的类别）
    return sortedClassCount[0][0]


def datingClassTest(filename):
    #将返回的特征矩阵和分类向量分别存储到datingDataMat和datingLabels中
    datingDataMat, datingLabels = file2matrix(filename)
    #取所有数据的百分之十
    hoRation = 0.10
    #数据归一化，返回归一化后的矩阵、数据范围、数据最小值
    norMat, ranges, minVals = autoNorm(datingDataMat)
    #获得norMat的行数
    m = norMat.shape[0]
    #百分之十测试数据的个数
    numTestVecs = int(m*hoRation)
    #分类错误计数
    errorCount = 0.0
    for i in range(numTestVecs):
        #前numTest个数据作为测试机，后m-numTestVecs个数据作为训练集
        classifierResult = classify0(norMat[i, :], norMat[numTestVecs:m, :], datingLabels[numTestVecs:m], 4)
        print("分类结果：%d\t真实类别:%d"%(classifierResult, datingLabels[i]))
        if classifierResult != datingLabels[i]:
            errorCount += 1.0
    print("错误率：%f%%"%(errorCount/float(numTestVecs)*100))


#通过一个人的三维特征进行分类输入
def classifyPerson(filename):
    #输入结果
    resultList = ['讨厌', '有、喜欢', '爱惨了奥']
    #三维用户特征输入
    precentTats = float(input("玩视频游戏消耗的时间百分比："))
    ffMiles = float(input("每年飞多远："))
    iceCream = float(input("每周消费多少升冰淇淋："))
    #处理数据
    datingDataMat, datingLabels = file2matrix(filename)
    #训练集归一化
    normMat, ranges, minVals = autoNorm(datingDataMat)
    # 生成NumPy数组,测试集
    inArr = np.array([precentTats, ffMiles, iceCream])
    #测试集归一化
    norminArr = (inArr - minVals) / ranges
    #返回分类结果
    classifierResult = classify0(norminArr, normMat, datingLabels, 3)
    #打印结果
    print("你可能%s这个人" % (resultList[classifierResult-1]))

if __name__ == '__main__':
    #打开的文件名
    filename = 'C:/Users/Syt/Desktop/datingTestSet.txt'
    classifyPerson(filename)
